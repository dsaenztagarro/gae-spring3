<?xml version="1.0" encoding="UTF-8"?>

<!-- - Sample namespace-based configuration - -->

<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<debug/>

	<!-- 
	This is enabling the use of Spring Security 3.0 annotations @PreAuthorize, @PreFilter etc., 
	which can be applied to methods on your Spring beans. 
	They can be used to apply authorization rules using simple expression values (similar 
	to be web expressions, but more powerful).
 	-->
	<global-method-security pre-post-annotations="enabled" />

	<http pattern="/_ah/*" security="none" />
	<http pattern="/resources/**" security="none" />
	<http pattern="/login*" security="none" />
	<http pattern="/loggedout.jsp" security="none" />
	
	<http use-expressions="true">
		<!-- 
		<intercept-url pattern="/secure/extreme/**" access="hasRole('supervisor')"/> 
		<intercept-url pattern="/secure/**" access="isAuthenticated()" />
		--> 
		<!-- Allow all other requests. In a real application you should adopt a whitelisting 
		approach where access is not allowed by default -->
		
		<intercept-url pattern="/**" access="isAuthenticated()" />
		
		<form-login login-page="/login.htm" login-processing-url="/j_spring_security_check" default-target-url="/login_success.htm" authentication-failure-url="/loginfailed.htm" />
		<logout logout-success-url="/loggedout.jsp" delete-cookies="JSESSIONID" />
		<!-- <remember-me />
		-->
		<!-- Uncomment to enable X509 client authentication support <x509 /> -->
		<!-- Uncomment to limit the number of sessions a user can have 
		<session-management invalid-session-url="/timeout.jsp">
			<concurrency-control max-sessions="1"
				error-if-maximum-exceeded="true" />
		</session-management>
		-->
	</http>

	<!-- Automatically receives AuthenticationEvent messages -->
	<beans:bean id="loggerListener" class="org.springframework.security.authentication.event.LoggerListener"/>

	<!-- Usernames/Passwords are rod/koala dianne/emu scott/wombat peter/opal -->
	<beans:bean id="encoder"
		class="org.springframework.security.crypto.password.StandardPasswordEncoder" />

	<authentication-manager alias="authenticationManager">
	    <authentication-provider ref="authenticationProvider"/>
	</authentication-manager>

	<beans:bean id="authenticationProvider" class="com.davlanca.pets.security.DBAuthenticationProvider">
	    <beans:property name="userService" ref="userService" />
	</beans:bean>

</beans:beans>